# Common Imports

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

from sklearn.model_selection import train_test_split

# 1. Histogram and Boxplot for California Housing Dataset

from sklearn.datasets import fetch_california_housing

data = fetch_california_housing(as_frame=True)

df = data.frame

# Histograms

print("\n--- Histograms ---")

df.hist(bins=30, figsize=(10, 8))

plt.tight_layout()

plt.show()

# Boxplots

print("\n--- Boxplots ---")

df.plot(kind='box', subplots=True, layout=(3,3), figsize=(12, 8))

plt.tight_layout()

plt.show()

# 2. Correlation Matrix, Heatmap and Pairplot

from sklearn.datasets import fetch_california_housing

data = fetch_california_housing(as_frame=True)

df = data.frame

print("\n--- Correlation Matrix ---")

corr = df.corr()

sns.heatmap(corr, annot=True, cmap='coolwarm')

plt.title("Correlation Heatmap")

plt.show()

# Pairplot (only a subset to keep it light)

print("\n--- Pairplot ---")

sns.pairplot(df.sample(200))

plt.show()

# 3. PCA on Iris Dataset

from sklearn.datasets import load_iris

from sklearn.decomposition import PCA

print("\n--- PCA on Iris Dataset ---")

iris = load_iris()

X = iris.data

y = iris.target

pca = PCA(n_components=2)

X_pca = pca.fit_transform(X)

plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y)

u):

return np.exp(-np.sum((x - xi) ** 2) / (2 * tau ** 2))

def predict_lwr(x, X, y, tau=0.5):

W = np.array([kernel(x, xi, tau) for xi in X])

W = np.diag(W)

theta = np.linalg.pinv(X.T @ W @ X) @ X.T @ W @ y

return x @ theta

X = np.linspace(1, 10, 100).reshape(-1, 1)

y = np.sin(X).ravel()

X_ = np.c_[np.ones(X.shape[0]), X]

preds = [predict_lwr(xi, X_, y) for xi in X_]

plt.plot(X, y, label='Original')

plt.plot(X, preds, label='LWR', color='r')

plt.legend()

plt.title('Locally Weighted Regression')

plt.show()

# 8. Decision Tree using Breast Cancer Dataset

from sklearn.datasets import load_breast_cancer

from sklearn.tree import DecisionTreeClassifier, plot_tree

print("\n--- Decision Tree ---")

data = load_breast_cancer()

X, y = data.data, data.target

model = DecisionTreeClassifier()

model.fit(X, y)

plot_tree(model, filled=True)

plt.title('Decision Tree - Breast Cancer')

plt.show()

# 9. Naive Bayes on Olivetti Faces

from sklearn.datasets import fetch_olivetti_faces

from sklearn.naive_bayes import GaussianNB

from sklearn.metrics import accuracy_score

print("\n--- Naive Bayes - Olivetti Faces ---")

faces = fetch_olivetti_faces()

X, y = faces.data, faces.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = GaussianNB()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))

# 10. K-means Clustering - Breast Cancer Dataset

from sklearn.cluster import KMeans

print("\n--- K-Means Clustering ---")

data = load_breast_cancer()

X = data.data

model = KMeans(n_clusters=2, n_init=10)

model.fit(X)

labels = model.labels_

plt.scatter(X[:, 0], X[:, 1], c=labels)

plt.title('K-Means Clustering - Breast Cancer')

plt.xlabel('Feature 1')

plt.ylabel('Feature 2')

plt.show()

